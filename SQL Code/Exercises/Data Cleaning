The following contains SQL queries used to check for non-uniform data, duplicated data, missing data, and data consistency in the film and customer table.


-- Check for non-uniform data in film tables
SELECT DISTINCT title
FROM film
ORDER BY title;

SELECT DISTINCT description
FROM film
ORDER BY description;

SELECT DISTINCT release_year
FROM film
ORDER BY release_year;

SELECT DISTINCT language_id
FROM film
ORDER BY language_id;

SELECT DISTINCT rental_duration
FROM film
ORDER BY rental_duration;

SELECT DISTINCT rental_rate
FROM film
ORDER BY rental_rate;

SELECT DISTINCT length
FROM film
ORDER BY length;

SELECT DISTINCT replacement_cost
FROM film
ORDER BY replacement_cost;

SELECT DISTINCT rating
FROM film
ORDER BY rating;

SELECT DISTINCT special_features
FROM film
ORDER BY special_features;

SELECT fulltext
FROM film
ORDER BY fulltext;


-- Check for non-uniform data in film tables
SELECT DISTINCT store_id
FROM customer
ORDER BY store_id;

SELECT DISTINCT first_name
FROM customer
ORDER BY first_name;

SELECT DISTINCT last_name
FROM customer
ORDER BY last_name;

SELECT DISTINCT email
FROM customer
ORDER BY email;

SELECT DISTINCT address_id
FROM customer
ORDER BY address_id;

SELECT DISTINCT activebool
FROM customer
ORDER BY activebool;

SELECT DISTINCT active
FROM customer
ORDER BY active;


-- Check for duplicate data in film table
SELECT
	title,
	description,
	release_year,
	language_id,
	rental_duration,
	rental_rate,
	length,
	replacement_cost,
	rating,
	special_features,
	fulltext,
	COUNT(*)
FROM  film
GROUP BY
	title,
	description,
	release_year,
	language_id,
	rental_duration,
	rental_rate,
	length,
	replacement_cost,
	rating,
	special_features,
	fulltext
HAVING COUNT(*) > 1; -- no result indicates no duplicates


-- Check for duplicate data in customer table
SELECT
	store_id,
	first_name,
	last_name,
	email,
	address_id,
	activebool,
	active,
	COUNT(*)
FROM customer
GROUP BY
	store_id,
	first_name,
	last_name,
	email,
	address_id,
	activebool,
	active
HAVING COUNT(*) > 1; -- no result indciates no duplicates


-- Check for missing data in film table
SELECT
	film_id,
	title
FROM film
WHERE title IS NULL;

SELECT
	film_id,
	description
FROM film
WHERE description IS NULL;

SELECT
	film_id,
	release_year
FROM film
WHERE release_year IS NULL;

SELECT
	film_id,
	language_id
FROM film
WHERE language_id IS NULL;

SELECT
	film_id,
	rental_duration
FROM film
WHERE rental_duration IS NULL;

SELECT
	film_id,
	rental_rate
FROM film
WHERE rental_rate IS NULL;

SELECT
	film_id,
	length
FROM film
WHERE length IS NULL;

SELECT
	film_id,
	replacement_cost
FROM film
WHERE replacement_cost IS NULL;

SELECT
	film_id,
	rating
FROM film
WHERE rating IS NULL;

SELECT
	film_id,
	special_features
FROM film
WHERE special_features IS NULL;

SELECT
	film_id,
	fulltext
FROM film
WHERE fulltext IS NULL;


-- Check for missing data in customer table
SELECT
	customer_id,
	store_id
FROM customer
WHERE store_id IS NULL;

SELECT
	customer_id,
	first_name
FROM customer
WHERE first_name IS NULL;

SELECT
	customer_id,
	last_name
FROM customer
WHERE last_name IS NULL;

SELECT
	customer_id,
	email
FROM customer
WHERE email IS NULL;

SELECT
	customer_id,
	address_id
FROM customer
WHERE address_id IS NULL;

SELECT
	customer_id,
	activebool
FROM customer
WHERE activebool IS NULL;

SELECT
	customer_id,
	active
FROM customer
WHERE active IS NULL;


-- Check for data value consistency in the film table
SELECT
	MIN(rental_duration) AS min_rent_duration,
	MAX(rental_duration) AS max_rent_duration,
	AVG(rental_duration) AS avg_rent_duration,
	MIN(rental_rate) AS min_rent_rate,
	MAX(rental_rate) AS max_rent_rate,
	AVG(rental_rate) AS avg_rent_rate,
	MIN(length) AS min_length,
	MAX(length) AS max_length,
	AVG(length) AS avg_length,
	MIN(replacement_cost) AS min_replace_cost,
	MAX(replacement_cost) AS max_replace_cost,
	AVG(replacement_cost) AS avg_replace_cost
FROM film;


-- Check for data value consistency in the customer table
SELECT
	MODE() WITHIN GROUP (ORDER BY store_id) AS modal_store_id,
	MODE() WITHIN GROUP (ORDER BY first_name) AS modal_first_name,
	MODE() WITHIN GROUP (ORDER BY last_name) AS modal_last_name,
	MODE() WITHIN GROUP (ORDER BY activebool) AS modal_activebool,
	MODE() WITHIN GROUP (ORDER BY active) AS modal_active
FROM customer;
